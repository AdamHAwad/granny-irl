"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[712],{4660:function(e,o,t){t.d(o,{Z:function(){return a}});var r=t(7437),l=t(857);function a(e){let{children:o,fallback:t}=e,{user:a,loading:i}=(0,l.a)();return i?(0,r.jsx)("div",{className:"flex min-h-screen items-center justify-center",children:(0,r.jsx)("div",{className:"text-lg",children:"Loading..."})}):a?(0,r.jsx)(r.Fragment,{children:o}):t?(0,r.jsx)(r.Fragment,{children:t}):null}},857:function(e,o,t){t.d(o,{AuthProvider:function(){return n},a:function(){return s}});var r=t(7437),l=t(2265),a=t(6881);let i=(0,l.createContext)(void 0);function n(e){let{children:o}=e,[t,n]=(0,l.useState)(null),[s,c]=(0,l.useState)(null),[u,d]=(0,l.useState)(!0);(0,l.useEffect)(()=>{(async()=>{var e;let{data:{session:o}}=await a.O.auth.getSession();c(o),n(null!==(e=null==o?void 0:o.user)&&void 0!==e?e:null),d(!1)})();let{data:{subscription:e}}=a.O.auth.onAuthStateChange(async(e,o)=>{var t;c(o),n(null!==(t=null==o?void 0:o.user)&&void 0!==t?t:null),d(!1)});return()=>e.unsubscribe()},[]);let m=async()=>{try{console.log("signInWithGoogle called"),console.log("NODE_ENV:","production");let e="https://granny-irl.vercel.app/";console.log("Redirect URL:",e);let{error:o}=await a.O.auth.signInWithOAuth({provider:"google",options:{redirectTo:e}});if(console.log("OAuth result:",{error:o}),o)throw o}catch(e){console.error("Error signing in with Google:",e)}},g=async()=>{try{let{error:e}=await a.O.auth.signOut();if(e)throw e}catch(e){console.error("Error signing out:",e)}};return(0,r.jsx)(i.Provider,{value:{user:t,session:s,loading:u,signInWithGoogle:m,logout:g},children:o})}function s(){let e=(0,l.useContext)(i);if(void 0===e)throw Error("useAuth must be used within an AuthProvider");return e}},4208:function(e,o,t){t.r(o),t.d(o,{checkEscapeTimerExpired:function(){return g},checkGameEnd:function(){return E},checkSkillcheckCompletion:function(){return d},clearPlayerLocation:function(){return T},completeSkillcheck:function(){return p},createRoom:function(){return h},eliminatePlayer:function(){return _},generateEscapeArea:function(){return u},generateRoomCode:function(){return s},generateSkillcheckPositions:function(){return c},getCurrentUserRooms:function(){return G},getGameResult:function(){return P},getPlayerGameHistory:function(){return R},getPlayerGameStats:function(){return b},joinRoom:function(){return k},kickPlayer:function(){return v},leaveRoom:function(){return D},markPlayerEscaped:function(){return f},queryCache:function(){return l},resetRoomForNewGame:function(){return C},revealEscapeAreaOnTimer:function(){return m},roomExists:function(){return y},startGame:function(){return w},subscribeToRoom:function(){return O},updatePlayerLocation:function(){return A}});var r=t(6881);let l=new Map;function a(e){let o=l.get(e);return o?Date.now()-o.timestamp>o.ttl?(l.delete(e),null):o.data:null}function i(e,o,t){l.set(e,{data:o,timestamp:Date.now(),ttl:t})}async function n(e){let o=!(arguments.length>1)||void 0===arguments[1]||arguments[1],t="room:".concat(e);if(o){let e=a(t);if(e)return e}try{let{data:o,error:l}=await r.O.rpc("get_room_with_player",{p_room_code:e,p_user_uid:null});if(!l&&o&&o.length>0){let e=o[0];return i(t,e,5e3),e}}catch(e){console.warn("⚠️ RPC fallback failed, using direct query:",e)}let{data:l,error:n}=await r.O.from("rooms").select("*").eq("id",e).single();return!n&&l?(i(t,l,5e3),l):null}function s(){return Math.random().toString(36).substring(2,8).toUpperCase()}function c(e,o,t){let r=[];for(let l=0;l<o;l++){let o=Math.sqrt(Math.random())*t,a=2*Math.random()*Math.PI,i=o/111320*Math.cos(a),n=o/(111320*Math.cos(e.latitude*Math.PI/180))*Math.sin(a),s={latitude:e.latitude+i,longitude:e.longitude+n},c={id:"skillcheck_".concat(l+1,"_").concat(Date.now()),location:s,isCompleted:!1,completedBy:[]};r.push(c)}return console.log("Generated ".concat(r.length," skillchecks within ").concat(t,"m of host")),r}function u(e,o){let t=Math.sqrt(Math.random())*o,r=2*Math.random()*Math.PI,l=t/(111320*Math.cos(e.latitude*Math.PI/180))*Math.sin(r),a={latitude:e.latitude+t/111320*Math.cos(r),longitude:e.longitude+l},i={id:"escape_area_".concat(Date.now()),location:a,isRevealed:!0,revealedAt:Date.now(),escapedPlayers:[]};return console.log("Generated escape area within ".concat(o,"m of center location")),i}async function d(e){var o,t,l,a;console.log("\uD83D\uDD0D DEBUG: checkSkillcheckCompletion called for room:",e);let{data:i,error:n}=await r.O.from("rooms").select("*").eq("id",e).single();if(n||!i){console.log("\uD83D\uDD0D DEBUG: Error or no room found:",n);return}console.log("\uD83D\uDD0D DEBUG: Room data:",{skillchecksEnabled:null===(o=i.settings.skillchecks)||void 0===o?void 0:o.enabled,allSkillchecksCompleted_camelCase:i.allSkillchecksCompleted,allskillcheckscompleted_lowercase:i.allskillcheckscompleted,escapeAreaExists:!!i.escapeArea,skillchecksCount:null===(t=i.skillchecks)||void 0===t?void 0:t.length});let s=i.allskillcheckscompleted||i.allSkillchecksCompleted;if(!(null===(l=i.settings.skillchecks)||void 0===l?void 0:l.enabled)||s||i.escapeArea){console.log("\uD83D\uDD0D DEBUG: Exiting early - conditions not met");return}let c=i.skillchecks||[],d=c.length>0&&c.every(e=>e.isCompleted);if(console.log("\uD83D\uDD0D DEBUG: Skillcheck completion check:",{skillchecksLength:c.length,allCompleted:d,completedCount:c.filter(e=>e.isCompleted).length}),d){console.log("\uD83D\uDD0D DEBUG: All skillchecks completed! Revealing escape area for room:",e);let o=i.skillcheckcenterlocation||(null===(a=i.players[i.host_uid])||void 0===a?void 0:a.location);if(o){let t=u(o,i.settings.skillchecks.maxDistanceFromHost),l=Date.now();console.log("\uD83D\uDD0D DEBUG: Updating room with escape area:",{roomCode:e,escapeArea:t,allSkillchecksCompleted:!0,escape_timer_started_at:l});let{error:a}=await r.O.from("rooms").update({allskillcheckscompleted:!0,escapearea:t,escape_timer_started_at:l}).eq("id",e);a?console.error("\uD83D\uDD0D DEBUG: Error updating room:",a):console.log("\uD83D\uDD0D DEBUG: Room updated successfully"),console.log("Escape area revealed due to skillcheck completion. 10-minute escape timer started."),setTimeout(async()=>{await g(e)},6e5)}}}async function m(e){console.log("⏰ revealEscapeAreaOnTimer: Starting for room",e);try{var o,t;let{data:l,error:a}=await r.O.from("rooms").select("*").eq("id",e).single();if(a)throw console.error("❌ Failed to fetch room for escape area reveal:",a),a;if(!l){console.error("❌ Room not found for escape area reveal");return}if(l.escapeArea||l.escapearea){console.log("⚠️ Escape area already revealed, skipping");return}console.log("⏰ Timer expired! Revealing escape area for room:",e);let i=l.skillcheckcenterlocation||(null===(o=l.players[l.host_uid])||void 0===o?void 0:o.location);if(!i){console.error("❌ No center location available for escape area generation");return}let n=(null===(t=l.settings.skillchecks)||void 0===t?void 0:t.maxDistanceFromHost)||500,s=u(i,n),c=Date.now(),{error:d}=await r.O.from("rooms").update({escapearea:s,escape_timer_started_at:c}).eq("id",e);if(d)throw console.error("❌ Failed to update room with escape area:",d),d;console.log("✅ Escape area revealed due to timer expiration. 10-minute escape timer started."),setTimeout(async()=>{await g(e)},6e5)}catch(e){console.error("❌ revealEscapeAreaOnTimer: Critical error:",e)}}async function g(e){console.log("checkEscapeTimerExpired: Checking 10-minute escape timer for room:",e);let{data:o,error:t}=await r.O.from("rooms").select("*").eq("id",e).single();if(t||!o||!o.escape_timer_started_at){console.log("checkEscapeTimerExpired: Room not found or no escape timer:",t);return}if("active"!==o.status||!o.escapeArea){console.log("checkEscapeTimerExpired: Game no longer active or no escape area");return}let l=Date.now();if(l>=o.escape_timer_started_at+6e5){console.log("checkEscapeTimerExpired: 10-minute escape timer expired! Auto-eliminating remaining survivors");let t=Object.values(o.players).filter(e=>"survivor"===e.role&&e.isAlive&&!e.hasEscaped);if(t.length>0){let a={...o.players};t.forEach(e=>{a[e.uid]={...e,isAlive:!1,eliminatedAt:l,eliminatedBy:"escape_timer_expired"},console.log("checkEscapeTimerExpired: Auto-eliminated survivor:",e.displayName)}),await r.O.from("rooms").update({players:a}).eq("id",e),setTimeout(()=>E(e),1e3)}else console.log("checkEscapeTimerExpired: No survivors to auto-eliminate (all escaped or already eliminated)")}else console.log("checkEscapeTimerExpired: Timer not yet expired, remaining time:",Math.round((o.escape_timer_started_at+6e5-l)/1e3),"seconds")}async function f(e,o){let t=arguments.length>2&&void 0!==arguments[2]&&arguments[2];console.log("\uD83D\uDEAA markPlayerEscaped: Starting for player",o,t?"(DEBUG MODE)":"");try{try{let t=r.O.rpc("mark_player_escaped_fast",{p_room_id:e,p_player_uid:o}),l=new Promise((e,o)=>setTimeout(()=>o(Error("Escape timeout")),5e3)),{error:a}=await Promise.race([t,l]);if(a)console.log("❌ Optimized escape marking failed:",a);else{console.log("✅ Player escaped using optimized function"),setTimeout(()=>E(e),100);return}}catch(e){console.log("⚠️ Escape RPC failed/timed out, using fallback:",(null==e?void 0:e.message)||e)}console.log("\uD83D\uDEAA Using escape fallback (fetch+update)");let{data:t,error:l}=await r.O.from("rooms").select("*").eq("id",e).single();if(l)throw console.error("❌ Failed to fetch room for escape marking:",l),l;let a=t.escapearea||t.escapeArea;if(!t||!a){console.error("❌ Room or escape area not found");return}let i=t.players[o];if(!i){console.log("⚠️ Player not found");return}let n={...t.players};n[o]={...i,isAlive:!0,hasEscaped:!0,escapedAt:Date.now()};let s={...a,escapedPlayers:[...a.escapedPlayers||[],o]},{error:c}=await r.O.from("rooms").update({players:n,escapearea:s}).eq("id",e);if(c)throw console.error("❌ Escape fallback failed:",c),c;console.log("✅ Player escaped using fallback method:",o),setTimeout(()=>E(e),100)}catch(e){console.error("❌ markPlayerEscaped: Critical error:",e)}}async function p(e,o,t){let l=arguments.length>3&&void 0!==arguments[3]&&arguments[3];console.log("\uD83C\uDFAF completeSkillcheck: Starting for skillcheck",o,"by player",t);try{try{let l=r.O.rpc("complete_skillcheck_fast",{p_room_id:e,p_skillcheck_id:o,p_player_uid:t}),a=new Promise((e,o)=>setTimeout(()=>o(Error("Skillcheck completion timeout")),5e3)),{error:i}=await Promise.race([l,a]);if(i)console.log("❌ Optimized skillcheck completion failed:",i);else{console.log("✅ Skillcheck completed using optimized function"),setTimeout(()=>d(e),100);return}}catch(e){console.log("⚠️ Skillcheck RPC failed/timed out, using fallback:",(null==e?void 0:e.message)||e)}let{data:a,error:i}=await r.O.from("rooms").select("*").eq("id",e).single();if(i)throw console.error("❌ Failed to fetch room for skillcheck completion:",i),i;if(!a||!a.skillchecks){console.error("❌ Room or skillchecks not found");return}let n=a.players[t];if(!l&&(!n||"survivor"!==n.role||!n.isAlive||n.hasEscaped)){console.log("⚠️ Player validation failed for skillcheck completion");return}if(l&&!n){console.log("⚠️ Player not found in debug mode");return}let s=a.skillchecks.map(e=>e.id!==o||e.isCompleted?e:{...e,isCompleted:!0,completedBy:[...e.completedBy,t],completedAt:Date.now()}),{error:c}=await r.O.from("rooms").update({skillchecks:s}).eq("id",e);if(c)throw console.error("❌ Failed to update skillcheck completion:",c),c;console.log("✅ Skillcheck completed using fallback method:",o),console.log("\uD83D\uDD0D DEBUG: Updated skillchecks:",s.map(e=>({id:e.id,isCompleted:e.isCompleted}))),setTimeout(()=>d(e),500)}catch(e){console.error("❌ completeSkillcheck: Critical error:",e)}}async function h(e,o,t,l){try{let a;let i=0;do if(a=s(),++i>10)throw Error("Could not generate unique room code");while(await y(a));let n={id:a,host_uid:e,players:{[e]:{uid:e,displayName:o.displayName,profilePictureUrl:o.profilePictureUrl,isAlive:!0}},settings:t,status:"waiting",created_at:Date.now(),skillcheckcenterlocation:l},{error:c}=await r.O.from("rooms").insert(n);if(c)throw c;return a}catch(e){throw console.error("Database error in createRoom:",e),e}}async function y(e){let{data:o,error:t}=await r.O.from("rooms").select("id").eq("id",e).single();if(t&&"PGRST116"!==t.code)throw t;return!!o}async function k(e,o,t){let{data:l,error:a}=await r.O.from("rooms").select("*").eq("id",e).single();if(a){if("PGRST116"===a.code)return null;throw a}if("waiting"!==l.status)throw Error("Game has already started");if(Object.keys(l.players).length>=l.settings.maxPlayers)throw Error("Room is full");let i={uid:o,displayName:t.displayName,profilePictureUrl:t.profilePictureUrl,isAlive:!0},n={...l.players,[o]:i},{error:s}=await r.O.from("rooms").update({players:n}).eq("id",e);if(s)throw s;return{...l,players:n}}async function D(e,o){let{data:t,error:l}=await r.O.from("rooms").select("*").eq("id",e).single();if(!l){if(t.host_uid===o){let{error:o}=await r.O.from("rooms").delete().eq("id",e);if(o)throw o}else{let l={...t.players};delete l[o];let{error:a}=await r.O.from("rooms").update({players:l}).eq("id",e);if(a)throw a}}}async function v(e,o,t){console.log("kickPlayer: Host",o,"kicking player",t,"from room",e);let{data:l,error:a}=await r.O.from("rooms").select("*").eq("id",e).single();if(a)throw console.error("kickPlayer: Error fetching room:",a),Error("Room not found");if(l.host_uid!==o)throw console.error("kickPlayer: Only host can kick players"),Error("Only the host can kick players");if(o===t)throw console.error("kickPlayer: Host cannot kick themselves"),Error("Host cannot kick themselves");if(!l.players[t])throw console.error("kickPlayer: Player not found in room"),Error("Player not found in room");let i={...l.players};delete i[t];let{error:n}=await r.O.from("rooms").update({players:i}).eq("id",e);if(n)throw console.error("kickPlayer: Error updating room:",n),n;console.log("kickPlayer: Successfully kicked player",t)}async function w(e){let{data:o,error:t}=await r.O.from("rooms").select("*").eq("id",e).single();if(t)throw Error("Room not found");let l=Object.keys(o.players);if(l.length<2)throw Error("Need at least 2 players to start");if(l.length<o.settings.killerCount+1)throw Error("Need at least ".concat(o.settings.killerCount+1," players for ").concat(o.settings.killerCount," killer(s)"));let a=[...l].sort(()=>Math.random()-.5),i=a.slice(0,o.settings.killerCount),n=a.slice(o.settings.killerCount),s={...o.players};i.forEach(e=>{s[e].role="killer"}),n.forEach(e=>{s[e].role="survivor"});let{error:u}=await r.O.from("rooms").update({status:"headstart",headstart_started_at:Date.now(),players:s}).eq("id",e);if(u)throw u;setTimeout(async()=>{try{var o,t;console.log("Headstart timer expired, transitioning to active phase for room:",e);let{data:l,error:a}=await r.O.from("rooms").select("*").eq("id",e).single();if(a||!l){console.error("Error fetching room for transition:",a);return}let i=[];if(null===(o=l.settings.skillchecks)||void 0===o?void 0:o.enabled){let o=l.skillcheckcenterlocation||(null===(t=l.players[l.host_uid])||void 0===t?void 0:t.location);o?(i=c(o,l.settings.skillchecks.count,l.settings.skillchecks.maxDistanceFromHost),console.log("Generated skillchecks for room:",e,i.length,"using",l.skillcheckcenterlocation?"pinned location":"host GPS location")):console.warn("Cannot generate skillchecks - no center location available")}let{error:n}=await r.O.from("rooms").update({status:"active",game_started_at:Date.now(),skillchecks:i.length>0?i:void 0}).eq("id",e);if(n)console.error("Error transitioning to active:",n);else{console.log("Game transitioned to active phase");let o=6e4*l.settings.roundLengthMinutes;console.log("Setting game end timer for",o,"ms (",l.settings.roundLengthMinutes,"minutes )"),setTimeout(async()=>{console.log("Game timer expired, checking game end for room:",e),await E(e)},o)}}catch(e){console.error("Error in game transition:",e)}},6e4*o.settings.headstartMinutes)}async function _(e,o,t){console.log("\uD83D\uDD25 eliminatePlayer: Starting for player:",o,"in room:",e);try{if(t){console.log("\uD83D\uDD25 Attempting secure elimination with eliminatedBy:",t);try{let l=r.O.rpc("handle_player_caught",{p_room_id:e,p_survivor_uid:o,p_killer_uid:t}),a=new Promise((e,o)=>setTimeout(()=>o(Error("Secure elimination timeout")),6e3)),{data:i,error:n}=await Promise.race([l,a]);if(console.log("\uD83D\uDD25 Secure elimination result:",{data:i,error:n}),!n&&(null==i?void 0:i.success)){console.log("✅ Player eliminated using secure caught handler"),setTimeout(()=>E(e),100);return}console.log("❌ Secure elimination failed:",n||"No success flag")}catch(e){console.log("⏱️ Secure elimination timed out, trying backup")}}console.log("\uD83D\uDD25 Attempting optimized elimination");try{let l=r.O.rpc("eliminate_player_fast",{p_room_id:e,p_player_uid:o,p_eliminated_by:t||null}),a=new Promise((e,o)=>setTimeout(()=>o(Error("Optimized elimination timeout")),5e3)),{error:i}=await Promise.race([l,a]);if(console.log("\uD83D\uDD25 Optimized elimination result:",{error:i}),i)console.log("❌ Optimized elimination failed:",i);else{console.log("✅ Player eliminated using optimized function"),setTimeout(()=>E(e),100);return}}catch(e){console.log("⏱️ Optimized elimination timed out")}console.log("⚠️ All RPC functions failed/timed out, using emergency fallback")}catch(e){console.error("❌ RPC functions threw error:",e),console.log("⚠️ Using emergency fallback due to exception")}console.log("\uD83D\uDEA8 Using emergency elimination fallback (fetch+update)");let{data:l,error:a}=await r.O.from("rooms").select("*").eq("id",e).single();if(a)throw console.error("❌ Failed to fetch room for elimination:",a),a;if(!l.players[o])throw Error("Player ".concat(o," not found in room"));let i={...l.players};i[o].isAlive=!1,i[o].eliminatedAt=Date.now(),t&&(i[o].eliminatedBy=t);let{error:n}=await r.O.from("rooms").update({players:i}).eq("id",e);if(n)throw console.error("❌ Emergency elimination failed:",n),n;console.log("✅ Player eliminated using emergency fallback"),setTimeout(()=>E(e),100)}async function E(e){console.log("\uD83C\uDFC1 checkGameEnd: Called for room",e);try{var o,t;let{data:l,error:a}=await r.O.from("rooms").select("*").eq("id",e).single();if(a){console.error("❌ checkGameEnd: Room fetch failed:",a);return}if(!l){console.error("❌ checkGameEnd: Room not found");return}console.log("checkGameEnd: Room status:",l.status,"game_started_at:",l.game_started_at);let i=Object.values(l.players),n=i.filter(e=>"killer"===e.role&&e.isAlive),s=i.filter(e=>"survivor"===e.role&&e.isAlive&&!e.hasEscaped),c=i.filter(e=>"survivor"===e.role&&e.hasEscaped),u=i.filter(e=>"survivor"===e.role),d=u.filter(e=>!e.isAlive&&!e.hasEscaped);console.log("\uD83C\uDFC1 checkGameEnd: Alive killers:",n.length,"Alive survivors:",s.length,"Escaped survivors:",c.length,"Total survivors:",u.length,"Eliminated survivors:",d.length),console.log("\uD83C\uDFC1 checkGameEnd: Player states:",i.map(e=>({name:e.displayName,role:e.role,isAlive:e.isAlive,hasEscaped:e.hasEscaped})));let g=!1,f=null;if(console.log("\uD83C\uDFC1 checkGameEnd: Checking if game should end. Alive survivors:",s.length),0===s.length){if(console.log("\uD83C\uDFC1 checkGameEnd: ✅ Game should end - no alive survivors remaining"),g=!0,null===(o=l.settings.skillchecks)||void 0===o?void 0:o.enabled){let e=d.length/u.length;e>=.75?(console.log("checkGameEnd: All survivors accounted for. Killers won - eliminated",Math.round(100*e)+"% of survivors"),f="killers"):(console.log("checkGameEnd: All survivors accounted for. Survivors won - only",Math.round(100*e)+"% eliminated, enough escaped"),f="survivors")}else console.log("checkGameEnd: Game ended - no survivors left (original mode)"),f="killers"}else if(l.game_started_at&&"active"===l.status){let o=6e4*l.settings.roundLengthMinutes,r=l.game_started_at+o,a=Date.now(),i=a-l.game_started_at;console.log("checkGameEnd: Game length:",o,"ms, End time:",r,"Current time:",a,"Time elapsed:",i,"Time remaining:",r-a),i>=5e3&&a>=r&&((null===(t=l.settings.skillchecks)||void 0===t?void 0:t.enabled)?(console.log("checkGameEnd: Timer expired in skillcheck game - revealing escape area"),await m(e)):(console.log("checkGameEnd: Timer expired in original game - survivors win"),g=!0,f="survivors"))}else console.log("\uD83C\uDFC1 checkGameEnd: ❌ Game not ending - alive survivors still remain:",s.length),console.log("\uD83C\uDFC1 checkGameEnd: Room status:",l.status,"game_started_at:",l.game_started_at);if(g&&f){let o=i.filter(e=>!e.isAlive).sort((e,o)=>(e.eliminatedAt||0)-(o.eliminatedAt||0)).map(e=>e.uid),t={room_id:e,winners:f,elimination_order:o,game_started_at:l.game_started_at,game_ended_at:Date.now(),final_players:l.players};console.log("\uD83C\uDFC1 Ending game with winners:",f);try{let o=r.O.from("rooms").update({status:"finished",game_ended_at:Date.now()}).eq("id",e),l=r.O.from("game_results").insert(t),[a,i]=await Promise.all([o,l]);if(a.error){console.error("❌ Failed to update room status to finished:",a.error);let{error:o}=await r.O.from("rooms").update({status:"finished",game_ended_at:Date.now()}).eq("id",e);if(o)throw console.error("❌ Fallback room update also failed:",o),o;console.log("✅ Room status updated using fallback method")}else console.log("✅ Room status updated to finished");i.error?console.error("❌ Failed to insert game result:",i.error):console.log("✅ Game result saved")}catch(e){throw console.error("❌ Critical error ending game:",e),e}setTimeout(async()=>{await C(e)},1e4),console.log("\uD83C\uDFC1 Game ended successfully")}}catch(e){console.error("❌ checkGameEnd: Critical error processing game end:",e)}}async function C(e){try{console.log("resetRoomForNewGame: Resetting room for new game:",e);let{data:o,error:t}=await r.O.from("rooms").select("*").eq("id",e).single();if(t||!o){console.log("resetRoomForNewGame: Room not found or error:",t);return}let l={...o.players};Object.keys(l).forEach(e=>{l[e]={...l[e],isAlive:!0,role:void 0,eliminatedAt:void 0,eliminatedBy:void 0,hasEscaped:void 0,escapedAt:void 0}});let{error:a}=await r.O.from("rooms").update({status:"waiting",players:l,headstart_started_at:null,game_started_at:null,game_ended_at:null,skillchecks:null,skillcheckTimeExtensions:null,escapearea:null,allskillcheckscompleted:!1,escape_timer_started_at:null}).eq("id",e);a?console.error("resetRoomForNewGame: Error resetting room:",a):console.log("resetRoomForNewGame: Room reset successfully")}catch(e){console.error("resetRoomForNewGame: Error:",e)}}function O(e,o){console.log("\uD83D\uDD14 Setting up optimized subscription for room:",e);let t=!0,a=null,s=0,c=async()=>{if(t)try{let t=await n(e,!0);t?(o(t),Date.now()):o(null)}catch(e){console.error("\uD83D\uDD14 Initial fetch error:",e),o(null)}},u=null,d=r=>{u&&clearTimeout(u),u=setTimeout(()=>{if(t){if(r){let o="room:".concat(e);l.delete(o),i(o,r,5e3)}o(r),Date.now()}},100)},m=()=>{a||(a=setInterval(async()=>{if(t)try{let o=await n(e,!1);o&&d(o)}catch(e){console.warn("\uD83D\uDD14 Polling error:",e)}},3e3))},g=()=>{a&&(clearInterval(a),a=null)},f=r.O.channel("room:".concat(e),{config:{presence:{key:e},broadcast:{self:!1}}}).on("postgres_changes",{event:"*",schema:"public",table:"rooms",filter:"id=eq.".concat(e)},o=>{if(console.log("\uD83D\uDD14 Real-time update:",o.eventType),t){if(s=0,g(),"DELETE"===o.eventType)d(null);else{let t=o.new;i("room:".concat(e),t,5e3),d(t)}}}).subscribe(async e=>{console.log("\uD83D\uDD14 Subscription status:",e),"SUBSCRIBED"===e?(await c(),s=0):"CHANNEL_ERROR"===e||"TIMED_OUT"===e?(s++,console.warn("\uD83D\uDD14 Connection issue (".concat(s,"/").concat(3,"), starting polling fallback")),s>=3&&(console.log("\uD83D\uDD14 Switching to polling mode due to persistent connection issues"),m())):"CLOSED"===e&&t&&s<3&&m()});return()=>{console.log("\uD83D\uDD14 Cleaning up subscription for room:",e),t=!1,g(),u&&clearTimeout(u),r.O.removeChannel(f)}}async function P(e){let{data:o,error:t}=await r.O.from("game_results").select("*").eq("room_id",e).order("game_ended_at",{ascending:!1}).limit(1);if(t)throw t;return o&&o.length>0?o[0]:null}async function G(e){let o="user_rooms:".concat(e),t=a(o);if(t)return t;try{let{data:t,error:l}=await r.O.from("rooms").select("*").in("status",["waiting","headstart","active"]).contains("players",JSON.stringify({[e]:{}}));if(!l&&t)return i(o,t,5e3),t;try{let{data:t,error:l}=await r.O.rpc("search_available_rooms",{p_user_uid:e,p_limit:50});if(!l&&t)return i(o,t,5e3),t}catch(e){console.warn("⚠️ RPC fallback failed for user rooms:",e)}let{data:a,error:n}=await r.O.from("rooms").select("*").in("status",["waiting","headstart","active"]).order("created_at",{ascending:!1}).limit(100);if(n)throw n;let s=(a||[]).filter(o=>o.players&&o.players[e]);return i(o,s,5e3),s}catch(e){return console.error("getCurrentUserRooms: Error:",e),[]}}async function R(e){try{console.log("getPlayerGameHistory: Fetching history for user:",e);let{data:o,error:t}=await r.O.from("game_results").select("*").order("game_ended_at",{ascending:!1});if(t)throw t;let l=(o||[]).filter(o=>o.final_players[e]).map(o=>{let t=o.final_players[e],r=t.role,l="killer"===r&&"killers"===o.winners||"survivor"===r&&"survivors"===o.winners,a=1;if(!l){if(t.isAlive)a=Object.values(o.final_players).filter(e=>e.role===r&&!e.isAlive).length+1;else{let t=o.elimination_order.indexOf(e);a=-1!==t?o.elimination_order.length-t+1:Object.keys(o.final_players).length}}let i=(o.game_ended_at-o.game_started_at)/6e4;return{room_id:o.room_id,winners:o.winners,game_started_at:o.game_started_at,game_ended_at:o.game_ended_at,playerRole:r,playerWon:l,placement:a,gameDurationMinutes:Math.round(10*i)/10}});return console.log("getPlayerGameHistory: Found",l.length,"games for user:",e),l}catch(e){return console.error("Error fetching player game history:",e),[]}}async function b(e){try{let o=await R(e),t={gamesPlayed:o.length,wins:o.filter(e=>e.playerWon).length,losses:o.filter(e=>!e.playerWon).length,killerWins:o.filter(e=>"killer"===e.playerRole&&e.playerWon).length,survivorWins:o.filter(e=>"survivor"===e.playerRole&&e.playerWon).length,avgPlacement:o.length>0?Math.round(o.reduce((e,o)=>e+o.placement,0)/o.length*10)/10:0,totalEliminations:o.filter(e=>!e.playerWon&&e.placement>1).length};return console.log("getPlayerGameStats: Calculated stats for user:",e,t),t}catch(e){return console.error("Error calculating player game stats:",e),{gamesPlayed:0,wins:0,losses:0,killerWins:0,survivorWins:0,avgPlacement:0,totalEliminations:0}}}async function A(e,o,t){try{console.log("\uD83D\uDCCD updatePlayerLocation: Updating location for player:",o);try{let{error:l}=await r.O.rpc("update_player_location_fast",{p_room_id:e,p_player_uid:o,p_latitude:t.latitude,p_longitude:t.longitude,p_accuracy:t.accuracy||null});if(l)console.log("❌ Location RPC failed:",l.message||l);else{console.log("✅ Location updated using optimized RPC");return}}catch(e){console.log("⚠️ Location RPC exception, using fallback")}console.log("\uD83D\uDCCD Using location fallback (fetch+update)");let{data:l,error:a}=await r.O.from("rooms").select("*").eq("id",e).single();if(a){console.error("❌ Failed to fetch room for location update:",a);return}if(!l.players[o]){console.error("❌ Player not found in room");return}if("active"!==l.status&&"headstart"!==l.status){console.log("\uD83D\uDCCD Not updating location - game not active");return}let i={...l.players};i[o]={...i[o],location:t,lastLocationUpdate:Date.now()};let{error:n}=await r.O.from("rooms").update({players:i}).eq("id",e);n?console.error("❌ Location fallback failed:",n):console.log("✅ Location updated using fallback method")}catch(e){console.error("❌ updatePlayerLocation: Critical error:",e)}}async function T(e,o){try{console.log("clearPlayerLocation: Clearing location for player:",o);let{data:t,error:l}=await r.O.from("rooms").select("*").eq("id",e).single();if(l||!t.players[o])return;let a={...t.players};a[o]={...a[o],location:void 0,lastLocationUpdate:void 0};let{error:i}=await r.O.from("rooms").update({players:a}).eq("id",e);i?console.error("clearPlayerLocation: Error updating room:",i):console.log("clearPlayerLocation: Successfully cleared location for player:",o)}catch(e){console.error("clearPlayerLocation: Error:",e)}}},6881:function(e,o,t){t.d(o,{O:function(){return r}});let r=(0,t(34).eI)("https://vyybwuzpwvrwpbtoreoz.supabase.co","eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZ5eWJ3dXpwd3Zyd3BidG9yZW96Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQwODc2MjYsImV4cCI6MjA2OTY2MzYyNn0.3Hg9ercrUA7y4VRK973dIO99TMSIjzNOuWo2XSWHTJU",{auth:{persistSession:!0,autoRefreshToken:!0,detectSessionInUrl:!0},realtime:{params:{eventsPerSecond:10}}})},6463:function(e,o,t){var r=t(1169);t.o(r,"useRouter")&&t.d(o,{useRouter:function(){return r.useRouter}})}}]);